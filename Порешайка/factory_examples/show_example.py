# Модуль возвращает одно задание из перечня методов модуля examples.py,
# которое затем будет показано в окне приложения Порешайка

import random
from itertools import compress
from factory_examples.examples import Addsub, Muldiv, Mix


class Show_test():
    def __init__(self, limit) -> None:
        self.limit = limit   # число-ограничение


    def get_example(self, f_1=0, f_2=0, f_3=0, f_4=0, f_5=0, f_6=0):
        """На вход метод получает логические значения (0 и 1) считанные с кнопок-флажков оконного приложения.
        Метод возвращает задание случайным образом выбранное из результирующего списка result,
        который складывается из списков методов lst_func"""

        # создаем экземпляры классов модуля examples
        obj_1 = Addsub(self.limit)
        obj_2 = Muldiv()            # в заданиях на умножение/деление 2-х чисел ограничение = 100
        obj_3 = Mix(self.limit)

        # двумерный список со списками методов модуля examples, соответствующих
        # кнопкам-флажкам оконного приложения (6 кнопок-флажков -> 6 списков методов)
        lst_func = [
            [obj_1.add_2args_wb(),     # сложение 2-х чисел
             obj_1.sub_2args_wb()      # вычитание 2-х чисел
             ],
            [obj_1.add_3args_wb(),     # сложение 3-х чисел без скобок
             obj_1.sub_3args_wb(),     # вычитание 3-х чисел без скобок
             obj_1.addsub_3args_wb()   # сложение/вычитание 3-х чисел без скобок
             ],
            [obj_1.addsub_3args()      # сложение/вычитание 3-х чисел со скобками
             ],
            [obj_2.mul_2args_wb(),     # умножение 2-х чисел
             obj_2.div_2args_wb()      # деление 2-х чисел
             ],
            [obj_3.mul_mix_wb(),       # умножение со сложением/вычитанием без скобок
             obj_3.div_mix_wb()        # деление со сложением/вычитанием без скобок
             ],
            [obj_3.mul_mix(),          # умножение со сложением/вычитанием со скобками
             obj_3.div_mix()           # деление со сложением/вычитанием со скобками
             ]
            ]

        # маска - список логических значений (комбинация 0 и 1)
        mask = [f_1, f_2, f_3, f_4, f_5, f_6]  # например: [1, 0, 1, 0, 0, 1]

        # результирующий одномерный список методов модуля examples
        result = sum(list(compress(lst_func, mask)), [])

        # возвращаем задание сгенерированное методом, который случайным образом выбран из списка result
        return random.choice(result)


if __name__ == '__main__':
    ex = Show_test(25)     # 25 - число-ограничение

    for _ in range(10):    # печатаем 10 примеров
        print(ex.get_example(1, 0, 0, 1, 0, 1))
